Character - С добавлением компонента CharacterMovementComponent, CapsuleComponent и SkeletalMeshComponent класс Pawn 
распространяется на высокофункциональный класс character. Персонаж предназначен для вертикально-ориентированного представления игроков, 
который может ходить, бегать, прыгать, летать и плавать по всему миру. Этот класс также содержит реализации базовых сетевых 
и входных моделей.

Pawn - Класс Pawn является базовым классом всех Актеров, которые могут контролироваться игроками или AI. 
Пешка - это физическое представление игрока или объекта AI в мире. Это не только означает, что Пешка определяет, 
как выглядит игрок или объект AI визуально, но также и то, как он взаимодействует с миром с точки зрения коллизий и других 
физических взаимодействий. Это может сбивать с толку в определенных обстоятельствах, так как некоторые типы игр могут 
не иметь видимой сетки игрока или аватара в игре. Несмотря на это, Pawn по-прежнему представляет физическое местоположение, 
поворот и т. Д. Игрока или объекта в игре. Персонаж - это особый тип пешки, который имеет возможность ходить.

Controllers - являются нефизическими Актерами, которые могут обладать Pawn (или производным от Pawn классом, таким как Character) 
чтобы контролировать свои действия. PlayerController используется игроками-людьми для управления пешками, 
а AIController реализует искусственный интеллект для пешек, которыми они управляют. Контроллеры берут на себя управление пешкой 
с функцией Possess и отказывают в управлении пешкой с функцией Unpossess.
Контроллеры получают уведомления для многих событий, происходящих для пешки, которую они контролируют. 
Это дает контроллеру возможность реализовать поведение в ответ на это событие, перехватывая событие и заменяя поведение 
по умолчанию Pawn. Можно поставить контролер перед заданной пешкой, что минимизирует задержку между обработкой ввода и движением пешки.
By default, there is a one-to-one relationship between Controllers and Pawns; meaning, 
each Controller controls only one Pawn at any given time. This is acceptable for most types of games, 
but may need to be adjusted as certain types of games - real-time strategy comes to mind - may require the ability 
to control multiple entities at once.

PlayerController - это интерфейс между Pawn и игроком, контролирующим его. 
PlayerController по существу представляет желание игрока.

An AIController is what it sounds like; a simulated "will" that can control a Pawn.

GameState содержит состояние игры, в которое могут входить такие вещи, как список подключенных игроков, оценка, 
где фигуры находятся в шахматной игре, или список заданий, которые вы завершили в открытой мировой игре. 
GameState существует на сервере и всех клиентах и ​​может свободно тиражироваться, чтобы обновлять все компьютеры.

GameMode include
Количество игроков и зрителей, а также максимальное количество игроков и зрителей разрешено. 
Как игроки входят в игру, которые могут включать в себя правила для выбора мест появления и другого поведения икры / респауна.
Можно ли приостановить игру или приостановить игру. 
Переходы между уровнями, в том числе, должна ли игра начинаться в кинематографическом режиме.

PlayerState - это состояние участника игры, такого как игрок-человек или бот, который имитирует игрока. 
Неигровый ИИ, который существует как часть игры, не будет иметь PlayerState. 
Примеры данных, которые были бы уместны в PlayerState, включают имя игрока, оценку, уровень соответствия для чего-то вроде 
MOBA или того, имеет ли игрок в данный момент флаг в игре CTF. PlayerStates для всех игроков существует на всех машинах 
(в отличие от PlayerControllers) и может свободно копироваться, чтобы синхронизировать ситуацию.
